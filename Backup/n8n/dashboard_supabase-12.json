{
  "name": "dashboard_supabase-12",
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "monthly_expenses",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "year",
              "condition": "eq",
              "keyValue": "={{ $json.year }}"
            },
            {
              "keyName": "month",
              "condition": "eq",
              "keyValue": "={{ $json.monthNumber }}"
            }
          ]
        }
      },
      "id": "0fd726e9-9ded-48cd-a6c5-c66605ffa6cc",
      "name": "Get Monthly Summary",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        256,
        352
      ],
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "pNSSt5wAQlRfIO2r",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "path": "dashboard-wydatki",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "5d4b5a52-4f21-46ea-9bd8-6604d082b5ab",
      "name": "Webhook Dashboard1",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -688,
        256
      ],
      "webhookId": "864cea3c-1c44-4c94-be54-852a36fa5b2b"
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        656,
        272
      ],
      "id": "dd0f61e6-8f05-44fc-9196-2f6cb31c5d59",
      "name": "Merge1"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "detailed_expenses",
        "returnAll": true,
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "keyName": "expense_date",
              "condition": "gte",
              "keyValue": "={{ $json.year }}-{{ String($json.monthNumber).padStart(2, '0') }}-01"
            },
            {
              "keyName": "expense_date",
              "condition": "lt",
              "keyValue": "={{ $json.year }}-{{ String($json.monthNumber).padStart(2, '0') }}-31"
            }
          ]
        }
      },
      "id": "badc2996-c1ae-4de6-8a35-4c0ecca990a3",
      "name": "Get All Expenses",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        256,
        544
      ],
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "pNSSt5wAQlRfIO2r",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// POPRAWIONY wƒôze≈Ç \"Code\" - parsowanie URL parameters\n\nconst input = $input.first().json;\nconsole.log('=== RAW INPUT DEBUG ===');\nconsole.log('Full input object:', JSON.stringify(input, null, 2));\n\n// *** POPRAWKA: Sprawd≈∫ r√≥≈ºne sposoby dostƒôpu do parametr√≥w URL ***\nlet urlParams = {};\n\n// Metoda 1: query parameters\nif (input.query) {\n    urlParams = input.query;\n    console.log('Found query params:', urlParams);\n}\n\n// Metoda 2: bezpo≈õrednio z input\nif (input.year || input.month) {\n    urlParams = {\n        year: input.year,\n        month: input.month,\n        ...urlParams\n    };\n    console.log('Found direct params:', {year: input.year, month: input.month});\n}\n\n// Metoda 3: z headers/body je≈õli GET nie dzia≈Ça\nif (input.body && typeof input.body === 'object') {\n    urlParams = {...urlParams, ...input.body};\n    console.log('Found body params:', input.body);\n}\n\nconsole.log('=== URL PARAMS FINAL ===');\nconsole.log('Final urlParams:', urlParams);\n\nconst now = new Date();\nconst monthNames = ['Stycze≈Ñ', 'Luty', 'Marzec', 'Kwiecie≈Ñ', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpie≈Ñ', 'Wrzesie≈Ñ', 'Pa≈∫dziernik', 'Listopad', 'Grudzie≈Ñ'];\n\n// *** POPRAWKA: U≈ºyj parseInt i dodaj fallback ***\nconst year = parseInt(urlParams.year) || now.getFullYear();\nconst monthNumber = parseInt(urlParams.month) || (now.getMonth() + 1);\n\nconsole.log('=== PARSING RESULTS ===');\nconsole.log('Raw year param:', urlParams.year, 'type:', typeof urlParams.year);\nconsole.log('Raw month param:', urlParams.month, 'type:', typeof urlParams.month);\nconsole.log('Parsed year:', year, 'type:', typeof year);\nconsole.log('Parsed monthNumber:', monthNumber, 'type:', typeof monthNumber);\n\n// Walidacja zakresu miesiƒÖca\nconst validMonthNumber = (monthNumber >= 1 && monthNumber <= 12) ? monthNumber : (now.getMonth() + 1);\nconst monthName = monthNames[validMonthNumber - 1];\nconst monthFolder = validMonthNumber + ' - ' + monthName;\n\nconsole.log('=== FINAL VALUES ===');\nconsole.log('Final year:', year);\nconsole.log('Final monthNumber:', validMonthNumber);\nconsole.log('Final monthName:', monthName);\n\n// *** DODAJ OBS≈ÅUGƒò PARAMETR√ìW KATEGORII ***\nconst categoryFilter = urlParams.category || null;\nconst showAll = urlParams.all === 'true';\n\n// *** DODAJ DOK≈ÅADNE DATY ***\nconst startDate = `${year}-${String(validMonthNumber).padStart(2, '0')}-01`;\nconst endDate = `${year}-${String(validMonthNumber).padStart(2, '0')}-31`;\n\nconsole.log('=== DATE GENERATION ===');\nconsole.log('Generated startDate:', startDate);\nconsole.log('Generated endDate:', endDate);\n\n// *** POPRAWKA: Zwr√≥ƒá WSZYSTKIE potrzebne warto≈õci ***\nconst folderStructure = {\n  year: year,\n  monthNumber: validMonthNumber,\n  monthName: monthName,\n  monthFolder: monthFolder,\n  categoryFilter: categoryFilter,\n  showAll: showAll,\n  startDate: startDate,\n  endDate: endDate,\n  timestamp: now.toISOString(),\n  // Debug info\n  debug: {\n    originalInput: input,\n    parsedParams: urlParams,\n    rawYear: urlParams.year,\n    rawMonth: urlParams.month\n  }\n};\n\nconsole.log('=== FINAL FOLDER STRUCTURE ===');\nconsole.log('Final folderStructure:', JSON.stringify(folderStructure, null, 2));\n\nreturn [{ json: folderStructure }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        256
      ],
      "id": "63299181-020a-4711-ba8b-0ab6c5eb05d2",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// POPRAWIONY wƒôze≈Ç Code1 - obs≈Çuguje puste miesiƒÖce dla yearly chart\n// Pobierz dane z merge i parametry z Code\nconst mergeInputs = $input.all();\nlet codeParams = {};\nlet monthlySummary = {};\nlet detailedExpenses = [];\n\n// *** POPRAWKA: Znajd≈∫ dane w mergeInputs ***\nfor (let i = 0; i < mergeInputs.length; i++) {\n    const input = mergeInputs[i];\n    if (input?.json) {\n        // Sprawd≈∫ czy to parametry z Code (ma monthName)\n        if (input.json.monthName && input.json.year) {\n            codeParams = input.json;\n            console.log(`Found codeParams in input ${i}:`, codeParams);\n        }\n        // Sprawd≈∫ czy to monthly summary (ma total_amount)\n        else if (input.json.total_amount !== undefined) {\n            monthlySummary = input.json;\n            console.log(`Found monthlySummary in input ${i}:`, monthlySummary);\n        }\n        // Sprawd≈∫ czy to detailed expenses (ma expense_date)\n        else if (input.json.expense_date) {\n            detailedExpenses.push(input);\n        }\n    }\n}\n\n// Je≈õli detailedExpenses nie zosta≈Ço znalezione jako pojedyncze obiekty, sprawd≈∫ resztƒô\nif (detailedExpenses.length === 0) {\n    detailedExpenses = mergeInputs.slice(2); // Fallback - ostatnie inputy\n}\n\nconsole.log('Code1 - Received inputs:', {\n    codeParams: Object.keys(codeParams),\n    monthlySummary: Object.keys(monthlySummary),\n    detailedExpensesCount: detailedExpenses.length\n});\n\n// *** FALLBACK dla brakujƒÖcych parametr√≥w ***\nif (!codeParams.monthName) {\n    const now = new Date();\n    const monthNames = ['Stycze≈Ñ', 'Luty', 'Marzec', 'Kwiecie≈Ñ', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpie≈Ñ', 'Wrzesie≈Ñ', 'Pa≈∫dziernik', 'Listopad', 'Grudzie≈Ñ'];\n    \n    codeParams = {\n        year: now.getFullYear(),\n        monthNumber: now.getMonth() + 1,\n        monthName: monthNames[now.getMonth()],\n        categoryFilter: null,\n        showAll: false\n    };\n    \n    console.log('Using fallback codeParams:', codeParams);\n}\n\n// *** U≈ªYWAJ PARAMETR√ìW Z URL ***\nconst currentMonth = `${codeParams.monthName} ${codeParams.year}`;\n\n// Mapowanie nazw i kolor√≥w kategorii\nconst categoryConfig = {\n  'Prywatne': { color: '#34C759', icon: 'üè†' },\n  'FHU': { color: '#FF2D92', icon: '‚õΩ' },      // ‚úÖ ZMIENIONE: FF2D92 zamiast FF9500\n  'MT HUB': { color: '#007AFF', icon: 'üîß' }    // ‚úÖ ZMIENIONE: 007AFF zamiast AF52DE\n};\n\n// *** FUNKCJA KLASYFIKACJI KATEGORII ***\nfunction classifyCategory(expense) {\n  const category = expense.category || 'Prywatne';\n  const subcategory = expense.subcategory || '';\n  \n  // Klasyfikacja zgodnie z wymaganiami\n  if (category === 'Firmowe') {\n    if (subcategory === 'MT_HUB' || subcategory === 'MT HUB') {\n      return 'MT HUB';\n    } else if (subcategory === 'FHU') {\n      return 'FHU';\n    } else {\n      return 'FHU'; // Inne transakcje Firmowe\n    }\n  } else if (category === 'Prywatne') {\n    return 'Prywatne';\n  } else {\n    return category; // Fallback\n  }\n}\n\n// *** NOWE: Sprawd≈∫ czy sƒÖ rzeczywiste dane wydatk√≥w ***\nconst hasRealExpenseData = detailedExpenses && detailedExpenses.length > 0 && \n                          detailedExpenses.some(expenseItem => {\n                            if (!expenseItem || !expenseItem.json) return false;\n                            const amount = parseFloat(expenseItem.json.amount || 0);\n                            return amount > 0;\n                          });\n\nconsole.log('=== DATA VALIDATION ===');\nconsole.log('detailedExpenses length:', detailedExpenses.length);\nconsole.log('hasRealExpenseData:', hasRealExpenseData);\n\n// *** NOWE: JE≈öLI BRAK RZECZYWISTYCH DANYCH - ZWR√ìƒÜ PUSTE DANE ***\nif (!hasRealExpenseData) {\n    console.log(`‚ùå No real expense data found - returning EMPTY data for period: ${codeParams.monthNumber}/${codeParams.year}`);\n    \n    // ‚úÖ WA≈ªNE: Zwr√≥ƒá puste dane z 0 warto≈õciami zamiast sztucznych danych\n    return [{\n        json: {\n            monthlyExpenses: 0,\n            currentMonth: currentMonth,\n            expenseCategories: [\n                { name: 'Prywatne', amount: 0, percentage: 0, transactionCount: 0, color: '#34C759' },\n                { name: 'MT HUB', amount: 0, percentage: 0, transactionCount: 0, color: '#007AFF' },\n                { name: 'FHU', amount: 0, percentage: 0, transactionCount: 0, color: '#FF2D92' }\n            ],\n            recentTransactions: []\n        }\n    }];\n}\n\nconsole.log('‚úÖ Found real expense data, processing...');\n\n// *** GRUPUJ WYDATKI WED≈ÅUG KLASYFIKACJI ***\nconst categoryTotals = {};\ndetailedExpenses.forEach(expenseItem => {\n  if (!expenseItem || !expenseItem.json) return;\n  \n  const expense = expenseItem.json;\n  const amount = parseFloat(expense.amount || 0);\n  if (amount <= 0) return; // Skip zero/negative amounts\n  \n  const category = classifyCategory(expense);\n  \n  if (!categoryTotals[category]) {\n    categoryTotals[category] = {\n      name: category,\n      amount: 0,\n      transactionCount: 0,\n      color: categoryConfig[category]?.color || '#007AFF'\n    };\n  }\n  categoryTotals[category].amount += amount;\n  categoryTotals[category].transactionCount++;\n});\n\n// *** UPEWNIJ SIƒò ≈ªE WSZYSTKIE KATEGORIE SƒÑ POKAZANE Z PRAWID≈ÅOWYMI KOLORAMI ***\nconst allCategories = ['Prywatne', 'MT HUB', 'FHU'];\nallCategories.forEach(categoryName => {\n    if (!categoryTotals[categoryName]) {\n        categoryTotals[categoryName] = {\n            name: categoryName,\n            amount: 0,\n            transactionCount: 0,\n            color: categoryConfig[categoryName]?.color || '#007AFF'\n        };\n    }\n});\n\nconsole.log('=== ALL CATEGORIES AFTER PADDING ===');\nObject.values(categoryTotals).forEach(cat => {\n    console.log(`${cat.name}: ${cat.amount} z≈Ç, ${cat.transactionCount} transakcji, color: ${cat.color}`);\n});\n\n// Oblicz procenty\nconst totalExpenses = Object.values(categoryTotals).reduce((sum, cat) => sum + cat.amount, 0);\n\n// *** NOWE: JE≈öLI SUMA WYNOSI 0, ZWR√ìƒÜ PUSTE DANE Z WSZYSTKIMI KATEGORIAMI ***\nif (totalExpenses <= 0) {\n    console.log('‚ùå Total expenses is 0 - returning EMPTY data with all categories');\n    return [{\n        json: {\n            monthlyExpenses: 0,\n            currentMonth: currentMonth,\n            expenseCategories: [\n                { name: 'Prywatne', amount: 0, percentage: 0, transactionCount: 0, color: '#34C759' },\n                { name: 'MT HUB', amount: 0, percentage: 0, transactionCount: 0, color: '#007AFF' },\n                { name: 'FHU', amount: 0, percentage: 0, transactionCount: 0, color: '#FF2D92' }\n            ],\n            recentTransactions: []\n        }\n    }];\n}\n\n// Oblicz procenty dla ka≈ºdej kategorii\nconst expenseCategories = Object.values(categoryTotals)\n  .sort((a, b) => b.amount - a.amount) // Sortuj wed≈Çug kwoty (najwiƒôksze pierwsze)\n  .map(cat => ({\n    ...cat,\n    percentage: totalExpenses > 0 ? Math.round((cat.amount / totalExpenses) * 100) : 0\n  }));\n\n// Posortuj wszystkie wydatki wed≈Çug daty\nlet sortedExpenses = detailedExpenses\n  .filter(expenseItem => {\n    if (!expenseItem || !expenseItem.json) return false;\n    const amount = parseFloat(expenseItem.json.amount || 0);\n    return amount > 0;\n  })\n  .sort((a, b) => new Date(b.json.expense_date) - new Date(a.json.expense_date));\n\nconsole.log('Total valid sorted expenses:', sortedExpenses.length);\n\n// *** ZASTOSUJ FILTR KATEGORII JE≈öLI PODANY ***\nif (codeParams.categoryFilter && codeParams.categoryFilter !== 'dashboard') {\n    const originalCount = sortedExpenses.length;\n    sortedExpenses = sortedExpenses.filter(expenseItem => {\n        const expense = expenseItem.json;\n        const category = classifyCategory(expense);\n        return category === codeParams.categoryFilter;\n    });\n    console.log(`Filtered by category \"${codeParams.categoryFilter}\": ${originalCount} -> ${sortedExpenses.length}`);\n}\n\n// Przygotuj transakcje (wszystkie lub ograniczone)\nconst showAll = codeParams.showAll || false;\nconst recentTransactions = (showAll ? sortedExpenses : sortedExpenses.slice(0, 50))\n  .map((expenseItem, index) => {\n    const expense = expenseItem.json;\n    const category = classifyCategory(expense);\n    \n    return {\n      id: expense.id || expense.created_at || (index + 1).toString(),\n      description: expense.description || 'Brak opisu',\n      amount: parseFloat(expense.amount || 0),\n      category: category,\n      date: expense.expense_date,\n      timestamp: expense.created_at,\n      supabaseId: expense.id\n    };\n  });\n\n// Dane z monthly_summary lub obliczone\nconst monthlyExpenses = monthlySummary.total_amount || totalExpenses || 0;\n\nconsole.log('=== FINAL RESULTS ===');\nconsole.log('Code1 - Final data:', {\n    monthlyExpenses,\n    currentMonth,\n    categoriesCount: expenseCategories.length,\n    transactionsCount: recentTransactions.length,\n    totalCalculated: totalExpenses,\n    monthlyFromDB: monthlySummary.total_amount\n});\n\n// Debug kategorii - szczeg√≥≈Çowy breakdown\nconsole.log('=== CATEGORY BREAKDOWN ===');\nexpenseCategories.forEach(cat => {\n    console.log(`${cat.name}: ${cat.transactionCount} transakcji, ${cat.amount} z≈Ç, ${cat.percentage}%, color: ${cat.color}`);\n});\n\n// Format odpowiedzi dla dashboardu\nreturn [{\n  json: {\n    monthlyExpenses,\n    currentMonth,\n    expenseCategories,\n    recentTransactions\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        848,
        368
      ],
      "id": "7b9de49c-da9f-439c-b537-4dd1edece48c",
      "name": "Code1"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.data }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1328,
        368
      ],
      "id": "c6df88d4-a0ee-4c3d-8eff-ca490cb0f8eb",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a18dc6ef-206f-40e8-8345-5faae76c39a0",
              "name": "headers.Access-Control-Allow-Origin",
              "value": "*",
              "type": "string"
            },
            {
              "id": "0cf767bf-46c2-43c2-80d6-6c27789201cb",
              "name": "headers.Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS",
              "type": "string"
            },
            {
              "id": "6194d7ea-4fd7-44d6-af50-d7646bc16978",
              "name": "headers.Access-Control-Allow-Headers",
              "value": "Content-Type, Accept",
              "type": "string"
            },
            {
              "id": "2becc806-a891-4b03-a168-ca5b7a4becfb",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            },
            {
              "id": "5740db24-bb99-4858-ae5b-97727063a9a5",
              "name": "headers.Access-Control-Allow-Methods",
              "value": "GET, POST, OPTIONS, PUT, DELETE",
              "type": "string"
            },
            {
              "id": "76efa9bf-0d29-47ff-ab23-8ca1457a68bc",
              "name": "headers.Access-Control-Allow-Headers",
              "value": "Content-Type, Accept, Authorization, X-Requested-With",
              "type": "string"
            },
            {
              "id": "131f5d80-3c58-492f-a863-7076710b8d1a",
              "name": "headers.Access-Control-Allow-Credentials",
              "value": "true",
              "type": "string"
            },
            {
              "id": "f4f1ae50-84eb-4f1d-b83a-0b5175e03af0",
              "name": "headers.Access-Control-Max-Age",
              "value": "86400",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1072,
        368
      ],
      "id": "ba5f9768-4032-42cf-83d5-cc7400606267",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Webhook Dashboard1').item.json.httpMethod }}",
                    "rightValue": "OPTIONS",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "cee2d0af-7458-4bd0-8fc6-d27618fb3f4e"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -208,
        256
      ],
      "id": "4e397d9c-76f9-4689-af94-df2ab80b028c",
      "name": "Check HTTP Method"
    },
    {
      "parameters": {
        "respondWith": "noData",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS, PUT, DELETE"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Accept, Authorization, X-Requested-With"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        0,
        0
      ],
      "id": "96510bb9-dcee-4877-bbf7-3670fe3becb0",
      "name": "OPTIONS Response"
    },
    {
      "parameters": {
        "jsCode": "// Pobierz dane z merge i parametry z Code\nconst mergeInputs = $input.all();\nlet codeParams = {};\nlet monthlySummary = {};\nlet detailedExpenses = [];\n\n// *** POPRAWKA: Znajd≈∫ dane w mergeInputs ***\nfor (let i = 0; i < mergeInputs.length; i++) {\n    const input = mergeInputs[i];\n    if (input?.json) {\n        // Sprawd≈∫ czy to parametry z Code (ma monthName)\n        if (input.json.monthName && input.json.year) {\n            codeParams = input.json;\n            console.log(`Found codeParams in input ${i}:`, codeParams);\n        }\n        // Sprawd≈∫ czy to monthly summary (ma total_amount)\n        else if (input.json.total_amount !== undefined) {\n            monthlySummary = input.json;\n            console.log(`Found monthlySummary in input ${i}:`, monthlySummary);\n        }\n        // Sprawd≈∫ czy to detailed expenses (ma expense_date)\n        else if (input.json.expense_date) {\n            detailedExpenses.push(input);\n        }\n    }\n}\n\n// Je≈õli detailedExpenses nie zosta≈Ço znalezione jako pojedyncze obiekty, sprawd≈∫ resztƒô\nif (detailedExpenses.length === 0) {\n    detailedExpenses = mergeInputs.slice(2); // Fallback - ostatnie inputy\n}\n\nconsole.log('Code1 - Received inputs:', {\n    codeParams: Object.keys(codeParams),\n    monthlySummary: Object.keys(monthlySummary),\n    detailedExpensesCount: detailedExpenses.length\n});\n\n// *** FALLBACK dla brakujƒÖcych parametr√≥w ***\nif (!codeParams.monthName) {\n    const now = new Date();\n    const monthNames = ['Stycze≈Ñ', 'Luty', 'Marzec', 'Kwiecie≈Ñ', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpie≈Ñ', 'Wrzesie≈Ñ', 'Pa≈∫dziernik', 'Listopad', 'Grudzie≈Ñ'];\n    \n    codeParams = {\n        year: now.getFullYear(),\n        monthNumber: now.getMonth() + 1,\n        monthName: monthNames[now.getMonth()],\n        categoryFilter: null,\n        showAll: false\n    };\n    \n    console.log('Using fallback codeParams:', codeParams);\n}\n\n// *** U≈ªYWAJ PARAMETR√ìW Z URL ***\nconst currentMonth = `${codeParams.monthName} ${codeParams.year}`;\n\n// Mapowanie nazw i kolor√≥w kategorii\nconst categoryConfig = {\n  'Prywatne': { color: '#34C759', icon: 'üè†' },\n  'FHU': { color: '#FF9500', icon: 'üíº' },\n  'MT HUB': { color: '#AF52DE', icon: 'üîß' }\n};\n\n// *** FUNKCJA KLASYFIKACJI KATEGORII ***\nfunction classifyCategory(expense) {\n  const category = expense.category || 'Prywatne';\n  const subcategory = expense.subcategory || '';\n  \n  // Klasyfikacja zgodnie z wymaganiami\n  if (category === 'Firmowe') {\n    if (subcategory === 'MT_HUB' || subcategory === 'MT HUB') {\n      return 'MT HUB';\n    } else if (subcategory === 'FHU') {\n      return 'FHU';\n    } else {\n      return 'FHU'; // Inne transakcje Firmowe\n    }\n  } else if (category === 'Prywatne') {\n    return 'Prywatne';\n  } else {\n    return category; // Fallback\n  }\n}\n\n// *** SPRAWD≈π CZY SƒÑ RZECZYWISTE DANE WYDATK√ìW ***\nconst hasRealExpenseData = detailedExpenses && detailedExpenses.length > 0 && \n                          detailedExpenses.some(expenseItem => {\n                            if (!expenseItem || !expenseItem.json) return false;\n                            const amount = parseFloat(expenseItem.json.amount || 0);\n                            return amount > 0;\n                          });\n\nconsole.log('=== DATA VALIDATION ===');\nconsole.log('detailedExpenses length:', detailedExpenses.length);\nconsole.log('hasRealExpenseData:', hasRealExpenseData);\n\n// *** JE≈öLI BRAK RZECZYWISTYCH DANYCH - ZWR√ìƒÜ PUSTE DANE ***\nif (!hasRealExpenseData) {\n    console.log('‚ùå No real expense data found - returning EMPTY data for period:', `${codeParams.monthNumber}/${codeParams.year}`);\n    return [{\n        json: {\n            monthlyExpenses: 0,\n            currentMonth: currentMonth,\n            expenseCategories: [\n                { name: 'Prywatne', amount: 0, percentage: 0, transactionCount: 0, color: '#34C759' },\n                { name: 'FHU', amount: 0, percentage: 0, transactionCount: 0, color: '#FF9500' },\n                { name: 'MT HUB', amount: 0, percentage: 0, transactionCount: 0, color: '#AF52DE' }\n            ],\n            recentTransactions: []\n        }\n    }];\n}\n\nconsole.log('‚úÖ Found real expense data, processing...');\n\n// *** GRUPUJ WYDATKI WED≈ÅUG KLASYFIKACJI ***\nconst categoryTotals = {};\ndetailedExpenses.forEach(expenseItem => {\n  if (!expenseItem || !expenseItem.json) return;\n  \n  const expense = expenseItem.json;\n  const amount = parseFloat(expense.amount || 0);\n  if (amount <= 0) return; // Skip zero/negative amounts\n  \n  const category = classifyCategory(expense);\n  \n  if (!categoryTotals[category]) {\n    categoryTotals[category] = {\n      name: category,\n      amount: 0,\n      transactionCount: 0,\n      color: categoryConfig[category]?.color || '#007AFF'\n    };\n  }\n  categoryTotals[category].amount += amount;\n  categoryTotals[category].transactionCount++;\n});\n\n// *** UPEWNIJ SIƒò ≈ªE WSZYSTKIE KATEGORIE SƒÑ POKAZANE ***\nconst allCategories = ['Prywatne', 'FHU', 'MT HUB'];\nallCategories.forEach(categoryName => {\n    if (!categoryTotals[categoryName]) {\n        categoryTotals[categoryName] = {\n            name: categoryName,\n            amount: 0,\n            transactionCount: 0,\n            color: categoryConfig[categoryName]?.color || '#007AFF'\n        };\n    }\n});\n\nconsole.log('=== ALL CATEGORIES AFTER PADDING ===');\nObject.values(categoryTotals).forEach(cat => {\n    console.log(`${cat.name}: ${cat.amount} z≈Ç, ${cat.transactionCount} transakcji`);\n});\n\n// Oblicz procenty\nconst totalExpenses = Object.values(categoryTotals).reduce((sum, cat) => sum + cat.amount, 0);\n\n// *** JE≈öLI SUMA WYNOSI 0, ZWR√ìƒÜ PUSTE DANE Z WSZYSTKIMI KATEGORIAMI ***\nif (totalExpenses <= 0) {\n    console.log('‚ùå Total expenses is 0 - returning EMPTY data with all categories');\n    return [{\n        json: {\n            monthlyExpenses: 0,\n            currentMonth: currentMonth,\n            expenseCategories: [\n                { name: 'Prywatne', amount: 0, percentage: 0, transactionCount: 0, color: '#34C759' },\n                { name: 'FHU', amount: 0, percentage: 0, transactionCount: 0, color: '#FF9500' },\n                { name: 'MT HUB', amount: 0, percentage: 0, transactionCount: 0, color: '#AF52DE' }\n            ],\n            recentTransactions: []\n        }\n    }];\n}\n\n// Oblicz procenty dla ka≈ºdej kategorii\nconst expenseCategories = Object.values(categoryTotals)\n  .sort((a, b) => b.amount - a.amount) // Sortuj wed≈Çug kwoty (najwiƒôksze pierwsze)\n  .map(cat => ({\n    ...cat,\n    percentage: totalExpenses > 0 ? Math.round((cat.amount / totalExpenses) * 100) : 0\n  }));\n\n// Posortuj wszystkie wydatki wed≈Çug daty\nlet sortedExpenses = detailedExpenses\n  .filter(expenseItem => {\n    if (!expenseItem || !expenseItem.json) return false;\n    const amount = parseFloat(expenseItem.json.amount || 0);\n    return amount > 0;\n  })\n  .sort((a, b) => new Date(b.json.expense_date) - new Date(a.json.expense_date));\n\nconsole.log('Total valid sorted expenses:', sortedExpenses.length);\n\n// *** ZASTOSUJ FILTR KATEGORII JE≈öLI PODANY ***\nif (codeParams.categoryFilter && codeParams.categoryFilter !== 'dashboard') {\n    const originalCount = sortedExpenses.length;\n    sortedExpenses = sortedExpenses.filter(expenseItem => {\n        const expense = expenseItem.json;\n        const category = classifyCategory(expense);\n        return category === codeParams.categoryFilter;\n    });\n    console.log(`Filtered by category \"${codeParams.categoryFilter}\": ${originalCount} -> ${sortedExpenses.length}`);\n}\n\n// Przygotuj transakcje (wszystkie lub ograniczone)\nconst showAll = codeParams.showAll || false;\nconst recentTransactions = (showAll ? sortedExpenses : sortedExpenses.slice(0, 50))\n  .map((expenseItem, index) => {\n    const expense = expenseItem.json;\n    const category = classifyCategory(expense);\n    \n    return {\n      id: expense.id || expense.created_at || (index + 1).toString(),\n      description: expense.description || 'Brak opisu',\n      amount: parseFloat(expense.amount || 0),\n      category: category,\n      date: expense.expense_date,\n      timestamp: expense.created_at,\n      supabaseId: expense.id\n    };\n  });\n\n// Dane z monthly_summary lub obliczone\nconst monthlyExpenses = monthlySummary.total_amount || totalExpenses || 0;\n\nconsole.log('=== FINAL RESULTS ===');\nconsole.log('Code1 - Final data:', {\n    monthlyExpenses,\n    currentMonth,\n    categoriesCount: expenseCategories.length,\n    transactionsCount: recentTransactions.length,\n    totalCalculated: totalExpenses,\n    monthlyFromDB: monthlySummary.total_amount\n});\n\n// Debug kategorii - szczeg√≥≈Çowy breakdown\nconsole.log('=== CATEGORY BREAKDOWN ===');\nexpenseCategories.forEach(cat => {\n    console.log(`${cat.name}: ${cat.transactionCount} transakcji, ${cat.amount} z≈Ç, ${cat.percentage}%`);\n});\n\n// Format odpowiedzi dla dashboardu\nreturn [{\n  json: {\n    monthlyExpenses,\n    currentMonth,\n    expenseCategories,\n    recentTransactions\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        816,
        656
      ],
      "id": "d72197e9-ec46-4ce2-bf23-405bf9a293ff",
      "name": "Code2"
    }
  ],
  "pinData": {},
  "connections": {
    "Get Monthly Summary": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Webhook Dashboard1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Expenses": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Check HTTP Method",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check HTTP Method": {
      "main": [
        [
          {
            "node": "OPTIONS Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Monthly Summary",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get All Expenses",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3b4149f1-e81c-4fa6-80bd-85f13cdfd3f3",
  "meta": {
    "instanceId": "bf72b9fcc7a9ac2b514d2ba3ec6fb953375a71d78fa918c9013d959f21219785"
  },
  "id": "HoNsM3DFsXbpUzyi",
  "tags": []
}